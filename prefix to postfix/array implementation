#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Stack {
    int size;
    int top;
    char *s;
    };

int isEmpty(struct Stack stack) {
    if(stack.top==-1)
        return 1;
    else
        return 0;
}

int isFull(struct Stack stack) {
    if(stack.top==stack.size-1)
        return 1;
    else
        return 0;
}

char findTop(struct Stack stack) {
    if(stack.top==-1)
        return -1;
    else {
        return stack.s[stack.top];
    }
}

void push(struct Stack *stack, char element) {
    if(stack->top==stack->size-1)
        printf("Overflow");
    else {
        stack->top++;
        stack->s[stack->top]=element;
}
}

char pop(struct Stack *stack) {
    char x;
    if(stack->top==-1)
        printf("Underflow");
    else {
        x=stack->s[stack->top];
        stack->top--;
        return x;
}
}

int isOperand(char c) {
    if(c=='+' || c=='-' || c=='/' | c=='*')
        return 0;
    else
        return 1;
}

int isOperator(char c) {
    if(c=='+' || c=='-')
        return 1;
    else if(c=='*' || c=='/')
        return 2;
    else
        return 0;
}

char * infix_postfix(char *phrase) {
    struct Stack st;
    st.size=strlen(phrase);
    st.top=-1;
    st.s=(char *)malloc(sizeof(st.size*strlen(phrase)+1));
    char *output=(char *)malloc(sizeof(strlen(phrase)+1));
    int i,j;
    i=j=0;
    while(phrase[i]!='\0') {
    if(isOperand(phrase[i]))
        output[j++] = phrase[i++];
    else {
        if(isOperator(phrase[i]) > isOperator(findTop(st)))
            push(&st, phrase[i++]);
        else
            output[j++] = pop(&st);
    }
    }
    while(!isEmpty(st)) {
        output[j++] = pop(&st);
    }
    output[j]='\0';
    printf("%s", output);
    return output;
}


void display(struct Stack stack) {
    for(int i=stack.top; i>=0; i--)
        printf("%d ", stack.s[i]);
    printf("\n");
}



int main()
{
    char *phrase="a+b*c-d/e";
    printf("%s\n", phrase);
    printf("%d\n", strlen(phrase));
    printf("After infix to postfix conversion: %s\n", infix_prefix(phrase));



}
