#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    char data;
    struct Node *next;
}*top=NULL;

void push(char key) {
    struct Node *t;
    t=(struct Node *)malloc(sizeof(struct Node));
    t->data=key;
    t->next=top;
    top=t;
}

char pop() {
    struct Node *t;
    char x;
    if(top==NULL)
        printf("stack underflow");
    else {
            t=top;
        top=top->next;
        x=t->data;
        free(t);
    }
    return x;
}

int isEmpty(struct Node *stack) {
    if(top==NULL)
        return 1;
    return 0;
}

int isOperand(char c) {
    if(c=='+' || c=='-' || c=='*' || c=='/')
        return 0;
    else
        return 1;
}

int presidence(char c) {
    if(c=='+' || c=='-')
        return 1;
    else if(c=='*' || c=='/')
        return 2;
    else
        return 0;
}

char * infix_postfix(char *phrase) {
    int i,j;
    i=j=0;
    char *output=(char *)malloc((strlen(phrase)+2)*sizeof(char));

    while(phrase[i]!='\0') {
    if(isOperand(phrase[i]))
        output[j++] = phrase[i++];
    else {
        if(presidence(phrase[i]) > presidence(top->data))
            push(phrase[i++]);
        else
            output[j++] = pop();
    }
    }
    while(top)
        output[j++] = pop();

    output[j]='\0';

    return output;
}

display(struct Node stack) {
    struct Node *p=top;
    while(p) {
        printf("%c ", p->data);
        p=p->next;
    }
    printf("\n");
}



int main()
{
    char *phrase="a+b*c";
    printf("Before conversion: %s\n", phrase);

    /* this push is because in the function infix_postfix(), a condition is checked if whether the precidence of the top->data is greater than or
    smaller than than the precidence of phrase[i], & if we call this function with empty stack, then it will not be able to find the precidence of top->data because top->data
    exist in the beginning */
    push('#');
    printf("After conversion from Infix to Postfix: %s\n", infix_postfix(phrase));

}
